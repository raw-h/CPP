It is a type or style of programming which revolves around objects, their properties and their behaviours.
An object is an entitiy which has 2 things:- 1. A state or property 2. A behaviour 
eg of objects are:- Camera, car, jug, bottle, and any object in the real world.

Why do we need this type of programming?
So that the readiblity of our program increases, to increase the manageability of our program and extensibility.

The memory allocation of a structure is Sequential, in this type of memory allocation there are 2 rules to be followed:-
    1. Any data type will always store it's value at the address, which is multiple of the size of that data type.
    2. Structure will take the size equal to the multiple of maximum bytes taken by a variable in that structure, 
    so if a structure contains a char(1 byte) and a short int(2 bytes) its size will not be 3, it's size will be 4, as char will be stored at 0th position, but the short int will be stored at the 2nd and 3rd
    position as the fitst multiple of 2 which in un occupied is 2. So position 0, 2 and 3 are used but still position 1 is still inside the architecture so the answer is 4.
Padding:- This is the extra bytes given to a structure if the 2nd rule of Sequential Memory allocation is not being full-filled.

const keyword:- It is something that does not change, and it must be initialised while declared it is used to make program elements constant.
    Using const keyword we create read only entities, which can not be changed down the line.
    It can be used with:-
    1. Variables
    2. Class Data members:- These are data variables in class which are made const, they are not initialised during declaration, their initialization occur in the constructor.
    3. Class Member functions:- It never modifies data members in an object, and this is done by return_type function_name() const;
    4. Class Object:- When an object is declared or created with const, it's data members can never be changed, during object's lifetime.

Class:- It is a user defined data type. It is a type of templateand an Object is an instance of class.
Size of an object is equal to the size of all of its properties.

When we create an instance of a class i.e an object we initialize the values of it's properties either with a value by ourself or by a garbage value.
* In case of an empty class (a class with no properties) a memory of 1 byte is allocated to it, so as to keep a track of the instance created.

We can also create an object without creating the class in the same program, i.e we can create an object from a class defined elsewhere in the folder we just have to include
it in the current program by #include "name_of_the_class.cpp"

To access the data members or properties we have to use the "." (DOT) operator.

Access Modifiers:- It means where the data members/behaviour in a class can be accessed, whether only in a class or also in a child class or also in a function.
    1. Public :- We can use these anywhere, in the class and also outside of the class.
    2. Private :- It means that the data member or the behaviour can only be accessed only insize the class, outside it will result into an error.
    3. Protected :- Similar to private, the only difference is that it can also be accessed in derived or child class unlike private members who are not even accessible in sub class.
By default the access modifier of any class is private.

Getters & Setters: These are one liner functions used to obtain or assign values of private data members of a class. We can not assign values to a private data member like we can
to a public data member.
While getter have only one work tht is to fetch the value but we can use setter in various ways by imposing different conditions as to who can set the value of a private data member.
When we create an object by <class_name> <object_name> we care using static allocation, but to do it dynamiclaly we can do it as <class_name> * <object_name> = new <class_name>;

Whenever we create an object a CONSTRUCTOR is called, a constructor's name is always the same as that of the class.
Constructor is invoked during object creation, it does not have a return type, it does not take any input parameters. (BTS what will happen is <object_name>.<class_name>() will be called.)
This is the Default Constructor.

The Constructor that is called when the object is instantiated is called the Default Constructor.
(this: it stores the address of the current obect)
Parameterised Constructor: These constructor takes different parameters with them and then we can use this keyword to differentiate between the parameters if they have the same name.

* The moment we write a constructor inside the class the default constructor stops working.

Copy Constructor:- (This is also another inbuilt constructor like the Default that a class provides you). This copies the values of one object into another.
It is done as Hero R(S); here we have created a hero R and in the parameter we passed another existing hero S.
As this constructor takes another object as a parameter we must pass it by reference and not by vale because if we do it by value then a copy will be created and since this is the new copy constructor it will call itself
and then it will create another copy of the object passed as parameter, hence it will get stuck in a permanent loop.

Shallow & Deep Copy:-

In Shallow Copy we are accessing the same memory with 2 or more different names, that's why whenever we change one value of any one object the same value gets changed in every other object also.
The default Copy Constructor does shallow copy.

While Deep Copy creates another copy of all the data members of the object and then copies the values from one object to the second object.
Since there are different memory locations in this case the problem with shallow copy is solved.

Copy Assignment Operator:-
Here we are simply copying the values of an already existing object to another one by using = .

Destructor:- These are used for memory deallocation, it is called as the objects becomes out of scope and it frees the memory.
It is also created when an object is created, it has the same name as the class, no return type, no input parameters.
We can also create our own destructors, using a tilde(~) in front of it.
Destructor are automatically called for static objects. And for dynamically created objects we have to call the destructor by delete <object_name>.

Static Keyword:-
It is used to create a data member which belongs to the class. It can be accessed without having to create an object.
How to initialize it ?
<datatype> <class_name> :: <function_name> = <value>
:: is the scope resolution operator.

Static Function:-
No need to create an object.
They don't have 'this' keyword, because this gives the address of the current object, and since there in no object created so we can not use this keyword.
Thes functions can only access static members.

Initialisation list:- It is a list we can use to initialise the class objects.
    The syntax for that is:-
    constructor (argument-list) : initialisation section{
        assignment + other code;
    }
    The initialisation section is the part which is used to quickly assign the initial values. 
eg:- 
class Test{
    int a; // As a is written frist it will be initialised first and because of that it should be before b in the initialisation section.
    int b;
public:
    Test(int i, int j) : a(i), b(j){
        // We can also use 
        a = i;
        b = j;
        body;
    }
};

4 Pillars of OOPS:

1. Encapsulation:- In simple terms it is known as wrapping up of Data Members and Functions together. We do this when we create a class, we encapsulate it with some data members and some functions.
    Fully Encapsulated Class, this is a class in which all the data members are private and can be only accessed within the class.
    This is Information Hiding / Data hiding.
    Advantages:-Data Hiding (it increases security).
            We can make our class into a "Read Only" class.
            Code reusability.
            Unit Testing.

2. Inheritance:- It means inheriting some functions of one class into another class. Here the class that is inheriting the functions is known as Child-Class or Sub-Class, and the class from which the functions are being 
    inherited in known as Parent-Class or Super-Class.
    Syntax:- class <sub_class> : <access modifier> <parent_class>
    Here the access modifiers that we use define how the data members or functions inherited will be accessed in the child class.
* Private Data Member of any class can not be inherited.
* When a class is inherited in a protected manner, we can use getter and setters to access the data members.
    __________________________________________________
    |Super-Class        Sub-Class       Accessibility |
    |_________________________________________________|
    |Public             Public          Public        |
    |Public             Private         Private       |
    |Public             Protected       Protected     |
    |_________________________________________________|
    |Private            Public          Not accessible|
    |Private            Private         Not accessible|
    |Private            Protected       Not accessible|
    |_________________________________________________|
    |Protected          Public          Protected     |
    |Protected          Private         Private       |
    |Protected          Protected       Protected     |
    |_________________________________________________|
    Types of Inheritance:-
        1. Single:- A single class is inherited from a single class.
        2. Multiple:- When one class inherits more than 1 class.
            Syntax:- class <class_name> : <access_specifier> <Super-class_name>, <access_specifier> <Super-class_name>, <access_specifier> <Super-class_name>....
        3. Multi-Level:- Class B is inherits class A, class C inherits class B, class D inherits class C, hence multiple classes are inherited on multiple level.
        4. Hierarchical:- One class serve as parent class for more than one class.
        5. Hybrid:- Combination of more than one type of inheritance.
    Inheritance Ambiguity: If two classes have a function with same name and a third class inherits both the classes using multiple inheritance, then which function will be called once user calls the function.
    This problem is solved by the scope resolution operator ::, <object_name>.<class_name>::<function_name>;

3. Polymorphism:- When the same thing exists in multiple forms, we call this property as polymorphism.
    There are 2 types of Polymorphism:-
    a. Compile time polymorphism(Static Polymorphism) = Here we know already at the time of compiling, in what forms a pariticular entity exists.
        It is of 2 types:-
            1. Function Overloading:- Writing the same function in multiple forms, by just creating a small change in it's signature by adding some parameters, but if we have functions with same name and parameters with only
               different return types it will generate an error and overloading will not be achieved by it. 
            2. Operator Overloading:-  Here we will assign new tasks to the pre-existing operators. We can not perform operator overloading for every operator out there.
    b. Run time polymorphism(Dynamic Polymorphism) = Method overriding is done in this. Here we don't know in compile time that one entity exists in multiple forms it can only be confirmed during runtime. There are 3 rules for this:-
        1. Functions must have the same name.
        2. Functions must have same parameters.
        3. It can be only achieved through inheritance.
        In this polymorphism we change the implementation of a function in the sub class.

4. Abstraction:- Implementation hiding, and only the essential imformation is shown.